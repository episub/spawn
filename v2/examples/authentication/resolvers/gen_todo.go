// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots
package resolvers

import (
	"context"
	"fmt"

	sq "github.com/Masterminds/squirrel"
	"github.com/example/todo/loader"
	"github.com/example/todo/models"
	opentracing "github.com/opentracing/opentracing-go"
)

func (r *queryResolver) EditableUpdateTodoFields(ctx context.Context, id string) ([]string, error) {
	return editableUpdateTodoFields(ctx, id)
}

func queryTodos(ctx context.Context, first *int, after *string, last *int, before *string, cf *models.TodoFilter, sortField *models.TodoSort, sortDirection *models.SortDirection, where []sq.Sqlizer) (o models.TodosConnection, err error) {
	span, ctx := opentracing.StartSpanFromContext(ctx, "queryTodos")
	defer span.Finish()

	f := models.NewFilter(first, after, last, before, sortDirection)

	// Set up the sort order based on inputs:
	if sortField != nil {
		var err error

		f.Order, err = sortTodo(ctx, *sortField, f.Order)

		if err != nil {
			return o, fmt.Errorf("Cannot sort by field %s: %s", sortField, err)
		}
	}

	// Configure the where clauses:
	if cf != nil {
		var fw []sq.Sqlizer
		fw, err = filterTodo(ctx, *cf)
		if err != nil {
			return
		}

		where = append(where, fw...)
	}

	f.Where = where

	r, pi, count, err := loader.Loader.GetAllTodo(ctx, f)

	if err != nil {
		return o, err
	}

	o.PageInfo = &pi
	o.TotalCount = count
	o.Edges = make([]*models.TodoEdge, len(r))

	for i, t := range r {

		o.Edges[i] = &models.TodoEdge{Cursor: fmt.Sprintf("%d", t.TodoID), Node: &t}

	}

	return o, err
}
